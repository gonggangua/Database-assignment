<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.LoginMapper">
    <update id="setRole">
        set role all
    </update>

    <select id="selectUserById" parameterType="int" resultType="User">
        select * from userBasicInfo
        where id = #{id}
    </select>

    <select id="selectUserByName" parameterType="String" resultType="User">
        select * from userBasicInfo
        where `name` like '%${name}%'
    </select>

    <select id="selectUserByAccurateName" parameterType="String" resultType="User">
        select * from userBasicInfo
        where `name` = #{name}
    </select>

    <select id="selectSelf" parameterType="String" resultType="User">
        select * from `selfView_${id}`
    </select>

    <select id="selectServerByName" parameterType="String" resultType="Server">
        select * from publicServer
        where `name` like '%${name}%'
    </select>

    <select id="selectServerByAccurateName" parameterType="String" resultType="Server">
        select * from publicServer
        where `name` = #{name}
    </select>

    <select id="selectServerById" parameterType="int" resultType="Server">
        select * from publicServer
        where `id` = #{id}
    </select>

    <select id="getJoinedServers" parameterType="int" resultType="Server">
        select * from `joinedServers_${id}`
    </select>

    <update id="login" parameterType="int" flushCache="true">
        update `selfView_${id}`
        set status = 'online'
    </update>

    <update id="setStatus" parameterType="User" flushCache="true">
        update `selfView_${id}`
        set status = #{status}
    </update>

    <update id="logout" parameterType="int" flushCache="true">
        update `selfView_${id}`
        set status = 'offline'
    </update>

    <select id="getFriends" parameterType="User" resultType="User" flushCache="true">
        select * from `friendsStatus_${id}`
    </select>

    <select id="getRequests" parameterType="User" resultType="User">
        select `userBasicInfo`.* from `friendsView_${id}`, `userBasicInfo`
        where (`status` = false) and
        (`target` = #{id}) and
        (`uid` = `userBasicInfo`.id)
    </select>

    <select id="getBlockedUsers" parameterType="User" resultType="User">
        select `userBasicInfo`.* from `blacklistView_${id}`, `userBasicInfo`
        where (`uid` = #{id}) and (`blockid` = `userBasicInfo`.id)
    </select>
</mapper>